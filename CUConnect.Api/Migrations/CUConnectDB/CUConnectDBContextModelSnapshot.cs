// <auto-generated />
using System;
using CUConnect.Database.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CUConnect.Api.Migrations.CUConnectDB
{
    [DbContext(typeof(CUConnectDBContext))]
    partial class CUConnectDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.25")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("AspNetRoleAspNetUser", b =>
                {
                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("RoleId", "UserId");

                    b.ToTable("AspNetRoleAspNetUser");
                });

            modelBuilder.Entity("AspNetUserRole", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex(new[] { "RoleId" }, "IX_AspNetUserRoles_RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("CUConnect.Database.Entities.AspNetRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "NormalizedName" }, "RoleNameIndex")
                        .IsUnique()
                        .HasFilter("([NormalizedName] IS NOT NULL)");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("CUConnect.Database.Entities.AspNetRoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RoleId" }, "IX_AspNetRoleClaims_RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("CUConnect.Database.Entities.AspNetUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ExpoToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UserJoined")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "NormalizedEmail" }, "EmailIndex");

                    b.HasIndex(new[] { "NormalizedUserName" }, "UserNameIndex")
                        .IsUnique()
                        .HasFilter("([NormalizedUserName] IS NOT NULL)");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("CUConnect.Database.Entities.AspNetUserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "UserId" }, "IX_AspNetUserClaims_UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("CUConnect.Database.Entities.AspNetUserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex(new[] { "UserId" }, "IX_AspNetUserLogins_UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("CUConnect.Database.Entities.AspNetUserToken", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("CUConnect.Database.Entities.Class", b =>
                {
                    b.Property<int>("ClassId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ClassID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClassId"), 1L, 1);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int")
                        .HasColumnName("DepartmentID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<int>("Semester")
                        .HasColumnType("int");

                    b.HasKey("ClassId");

                    b.HasIndex(new[] { "DepartmentId" }, "IX_Classes_DepartmentID");

                    b.ToTable("Classes");
                });

            modelBuilder.Entity("CUConnect.Database.Entities.Department", b =>
                {
                    b.Property<int>("DepartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("DepartmentID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DepartmentId"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("DepartmentId");

                    b.ToTable("Department");
                });

            modelBuilder.Entity("CUConnect.Database.Entities.Document", b =>
                {
                    b.Property<int>("DocumentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("DocumentID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DocumentId"), 1L, 1);

                    b.Property<string>("FamilyType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MimeType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PostsId")
                        .HasColumnType("int")
                        .HasColumnName("PostsID");

                    b.Property<int?>("ProfileId")
                        .HasColumnType("int")
                        .HasColumnName("ProfileID");

                    b.HasKey("DocumentId");

                    b.HasIndex(new[] { "PostsId" }, "IX_Documents_PostsID");

                    b.HasIndex(new[] { "ProfileId" }, "IX_Documents_ProfileID");

                    b.ToTable("Documents");
                });

            modelBuilder.Entity("CUConnect.Database.Entities.Enrollment", b =>
                {
                    b.Property<int>("EnrollmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("EnrollmentID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EnrollmentId"), 1L, 1);

                    b.Property<int>("ClassId")
                        .HasColumnType("int")
                        .HasColumnName("ClassID");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("UserID");

                    b.HasKey("EnrollmentId");

                    b.HasIndex(new[] { "ClassId" }, "IX_Enrollments_ClassID");

                    b.HasIndex(new[] { "UserId" }, "IX_Enrollments_UserID");

                    b.ToTable("Enrollments");
                });

            modelBuilder.Entity("CUConnect.Database.Entities.Post", b =>
                {
                    b.Property<int>("PostId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PostID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PostId"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PostedOn")
                        .HasColumnType("datetime");

                    b.Property<int>("ProfileId")
                        .HasColumnType("int")
                        .HasColumnName("ProfileID");

                    b.HasKey("PostId");

                    b.HasIndex(new[] { "ProfileId" }, "IX_Posts_ProfileID");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("CUConnect.Database.Entities.PostTag", b =>
                {
                    b.Property<int>("PostTagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PostTagID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PostTagId"), 1L, 1);

                    b.Property<int>("PostId")
                        .HasColumnType("int")
                        .HasColumnName("PostID");

                    b.Property<int>("TagId")
                        .HasColumnType("int")
                        .HasColumnName("TagID");

                    b.HasKey("PostTagId");

                    b.HasIndex(new[] { "PostId" }, "IX_PostTags_PostID");

                    b.HasIndex(new[] { "TagId" }, "IX_PostTags_TagID");

                    b.ToTable("PostTags");
                });

            modelBuilder.Entity("CUConnect.Database.Entities.Profile", b =>
                {
                    b.Property<int>("ProfileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ProfileID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProfileId"), 1L, 1);

                    b.Property<int?>("ClassId")
                        .HasColumnType("int")
                        .HasColumnName("ClassID");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("int")
                        .HasColumnName("DepartmentID");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("UserID");

                    b.HasKey("ProfileId");

                    b.HasIndex(new[] { "ClassId" }, "IX_Profile_ClassID");

                    b.HasIndex(new[] { "DepartmentId" }, "IX_Profile_DepartmentID");

                    b.HasIndex(new[] { "UserId" }, "IX_Profile_UserID");

                    b.ToTable("Profile");
                });

            modelBuilder.Entity("CUConnect.Database.Entities.Reaction", b =>
                {
                    b.Property<int>("ReactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ReactionID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReactionId"), 1L, 1);

                    b.Property<int>("PostsId")
                        .HasColumnType("int")
                        .HasColumnName("PostsID");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("UserID");

                    b.HasKey("ReactionId");

                    b.HasIndex(new[] { "PostsId" }, "IX_Reactions_PostsID");

                    b.HasIndex(new[] { "UserId" }, "IX_Reactions_UserID");

                    b.ToTable("Reactions");
                });

            modelBuilder.Entity("CUConnect.Database.Entities.Subscription", b =>
                {
                    b.Property<int>("SubscritionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SubscritionID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SubscritionId"), 1L, 1);

                    b.Property<int>("ProfileId")
                        .HasColumnType("int")
                        .HasColumnName("ProfileID");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("UserID");

                    b.HasKey("SubscritionId")
                        .HasName("PK__Subscrip__94D8EB0A214B8F81");

                    b.HasIndex(new[] { "ProfileId" }, "IX_Subscriptions_ProfileID");

                    b.HasIndex(new[] { "UserId" }, "IX_Subscriptions_UserID");

                    b.ToTable("Subscriptions");
                });

            modelBuilder.Entity("CUConnect.Database.Entities.Tag", b =>
                {
                    b.Property<int>("TagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TagID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TagId"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TagId");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("AspNetUserRole", b =>
                {
                    b.HasOne("CUConnect.Database.Entities.AspNetRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CUConnect.Database.Entities.AspNetUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CUConnect.Database.Entities.AspNetRoleClaim", b =>
                {
                    b.HasOne("CUConnect.Database.Entities.AspNetRole", "Role")
                        .WithMany("AspNetRoleClaims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("CUConnect.Database.Entities.AspNetUserClaim", b =>
                {
                    b.HasOne("CUConnect.Database.Entities.AspNetUser", "User")
                        .WithMany("AspNetUserClaims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CUConnect.Database.Entities.AspNetUserLogin", b =>
                {
                    b.HasOne("CUConnect.Database.Entities.AspNetUser", "User")
                        .WithMany("AspNetUserLogins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CUConnect.Database.Entities.AspNetUserToken", b =>
                {
                    b.HasOne("CUConnect.Database.Entities.AspNetUser", "User")
                        .WithMany("AspNetUserTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CUConnect.Database.Entities.Class", b =>
                {
                    b.HasOne("CUConnect.Database.Entities.Department", "Department")
                        .WithMany("Classes")
                        .HasForeignKey("DepartmentId")
                        .IsRequired()
                        .HasConstraintName("FK_Classes.DepartmentID");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("CUConnect.Database.Entities.Document", b =>
                {
                    b.HasOne("CUConnect.Database.Entities.Post", "Posts")
                        .WithMany("Documents")
                        .HasForeignKey("PostsId")
                        .HasConstraintName("FK_Documents.PostsID");

                    b.HasOne("CUConnect.Database.Entities.Profile", "Profile")
                        .WithMany("Documents")
                        .HasForeignKey("ProfileId")
                        .HasConstraintName("FK_Documents.ProfileID");

                    b.Navigation("Posts");

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("CUConnect.Database.Entities.Enrollment", b =>
                {
                    b.HasOne("CUConnect.Database.Entities.Class", "Class")
                        .WithMany("Enrollments")
                        .HasForeignKey("ClassId")
                        .IsRequired()
                        .HasConstraintName("FK_Enrollments.ClassID");

                    b.HasOne("CUConnect.Database.Entities.AspNetUser", "User")
                        .WithMany("Enrollments")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Enrollments.UserID");

                    b.Navigation("Class");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CUConnect.Database.Entities.Post", b =>
                {
                    b.HasOne("CUConnect.Database.Entities.Profile", "Profile")
                        .WithMany("Posts")
                        .HasForeignKey("ProfileId")
                        .IsRequired()
                        .HasConstraintName("FK_Posts.ProfileID");

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("CUConnect.Database.Entities.PostTag", b =>
                {
                    b.HasOne("CUConnect.Database.Entities.Post", "Post")
                        .WithMany("PostTags")
                        .HasForeignKey("PostId")
                        .IsRequired()
                        .HasConstraintName("FK_PostTags.PostID");

                    b.HasOne("CUConnect.Database.Entities.Tag", "Tag")
                        .WithMany("PostTags")
                        .HasForeignKey("TagId")
                        .IsRequired()
                        .HasConstraintName("FK_PostTags.TagID");

                    b.Navigation("Post");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("CUConnect.Database.Entities.Profile", b =>
                {
                    b.HasOne("CUConnect.Database.Entities.Class", "Class")
                        .WithMany("Profiles")
                        .HasForeignKey("ClassId")
                        .HasConstraintName("FK_Profile.ClassID");

                    b.HasOne("CUConnect.Database.Entities.Department", "Department")
                        .WithMany("Profiles")
                        .HasForeignKey("DepartmentId")
                        .HasConstraintName("FK_Profile.DepartmentID");

                    b.HasOne("CUConnect.Database.Entities.AspNetUser", "User")
                        .WithMany("Profiles")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Profile.UserID");

                    b.Navigation("Class");

                    b.Navigation("Department");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CUConnect.Database.Entities.Reaction", b =>
                {
                    b.HasOne("CUConnect.Database.Entities.Post", "Posts")
                        .WithMany("Reactions")
                        .HasForeignKey("PostsId")
                        .IsRequired()
                        .HasConstraintName("FK_Reactions.PostsID");

                    b.HasOne("CUConnect.Database.Entities.AspNetUser", "User")
                        .WithMany("Reactions")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Reactions.UserID");

                    b.Navigation("Posts");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CUConnect.Database.Entities.Subscription", b =>
                {
                    b.HasOne("CUConnect.Database.Entities.Profile", "Profile")
                        .WithMany("Subscriptions")
                        .HasForeignKey("ProfileId")
                        .IsRequired()
                        .HasConstraintName("FK_Subscriptions.ProfileID");

                    b.HasOne("CUConnect.Database.Entities.AspNetUser", "User")
                        .WithMany("Subscriptions")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Subscriptions.UserID");

                    b.Navigation("Profile");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CUConnect.Database.Entities.AspNetRole", b =>
                {
                    b.Navigation("AspNetRoleClaims");
                });

            modelBuilder.Entity("CUConnect.Database.Entities.AspNetUser", b =>
                {
                    b.Navigation("AspNetUserClaims");

                    b.Navigation("AspNetUserLogins");

                    b.Navigation("AspNetUserTokens");

                    b.Navigation("Enrollments");

                    b.Navigation("Profiles");

                    b.Navigation("Reactions");

                    b.Navigation("Subscriptions");
                });

            modelBuilder.Entity("CUConnect.Database.Entities.Class", b =>
                {
                    b.Navigation("Enrollments");

                    b.Navigation("Profiles");
                });

            modelBuilder.Entity("CUConnect.Database.Entities.Department", b =>
                {
                    b.Navigation("Classes");

                    b.Navigation("Profiles");
                });

            modelBuilder.Entity("CUConnect.Database.Entities.Post", b =>
                {
                    b.Navigation("Documents");

                    b.Navigation("PostTags");

                    b.Navigation("Reactions");
                });

            modelBuilder.Entity("CUConnect.Database.Entities.Profile", b =>
                {
                    b.Navigation("Documents");

                    b.Navigation("Posts");

                    b.Navigation("Subscriptions");
                });

            modelBuilder.Entity("CUConnect.Database.Entities.Tag", b =>
                {
                    b.Navigation("PostTags");
                });
#pragma warning restore 612, 618
        }
    }
}
